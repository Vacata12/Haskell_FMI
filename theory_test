1. Линейно итеративен процес - При тях във всеки момент състоянието на пресмятанията се
    описва (като при това може при необходимост да бъде прекъснато
    и после - възстановено) от няколко променливи например
    променливи на състоянието и правило, с чиято помощ се
    извършва преходът от дадено състояние към следващото.

    Пример:
    factIter :: Int -> Int
    factIter n = helper n 1
    where
    -- type inference
        helper :: Int -> Int -> Int
        helper 0 result = result
        helper leftover result = helper (leftover - 1) (result * leftover)

2. Линейно рекурсивен процес - При тях се поражда верига от обръщения към дефинираната
    функция с все по-прости в определен конкретен смисъл стойности
    на аргументите, докато се стигне до обръщение с т. нар. базов 
    граничен вариант на стойности на аргументите, след което
    започва последователно пресмятане на генерираните вече
    обръщения.

    Пример:
    factRec :: Int -> Int
    factRec 0 = 1
    factRec n = n * factRec (n - 1)

3. Guards - Условието („охраняващ“ израз, guard) е Булев израз. Условия
    се използват, когато трябва да се опишат различни случаи в
    дефиницията на функция. Клаузата otherwise не е задължителна.
    max :: Int -> Int -> Int
    max x y
    | x >= y = x
    | otherwise = y
    Оценяване: Когато трябва да се приложи дадена функция към дадено
    множество от изрази, е необходимо да се установи кой от поредните случаи в
    дефиницията на функцията е приложим. Затова трябва последователно да се
    оценят охраняващите изрази, докато се достигне до
    първия срещнат, чиято оценка е True. Съответният израз от
    дясната страна на равенството определя резултата.

4. List Comprehension - Синтаксис:
    [expr | q1, … , qk] , където expr е израз, а qi може да бъде
    - генератор от вида p <- lExp, където p е образец и lExp е
    израз от списъчен тип
    - тест (филтър), bExp, който е булев израз
    При това в qi могат да участват променливите, използвани в q1,
    q2, … , qi-1.

    Пример 1
    Да предположим, че стойността на ex е [3,4,8]. Тогава записът
    [3*n | n <- ex] означава списъка [9,12,24].
    Пример 2
    [isEven n | n <- ex] [False,True,True]

5. Примитивна рекурсия върху списъци - Използва се само един списък 
    и дъното на рекурсията е празният списък
    също така трябва да имаме само едно извикване на опашката на списъка.
    Пример:
    задача да намерим сумата на
    елементите на даден списък от цели числа
    sum :: [Int] -> Int
    sum [] = 0
    sum (x:xs) = x + sum xs

6. Обща рекурсия върху списъци - Използва се повече от един списък
    или дъното на рекурсията не зависи от list(s)
    или има повече от едно рекурсивно извикване.
    Пример 1. 
    Ще дефинираме функцията zip, която трансформира
    два списъка в списък от двойки от съответните елементи на двата
    списъка, например
    zip [1,3] [2,4] = [(1,2),(3,4)]
    zip [1,2] [‘a’,’b’,’c’] = [(1,’a’),(2,’b’)]
    Ще опишем дефиницията на тази функция с рекурсия относно
    двата аргумента.
    zip :: [a] -> [b] -> [(a,b)]
    zip (x:xs) (y:ys) = (x,y) : zip xs ys
    zip _ _ = []

7. Folds- група функции от по-висок ред
    (1) foldr - комбиниране/акумулиране, извършено чрез групиране отдясно
    foldr (-) 0 [1, 2, 3]
    -- 1 - (2 - (3 - 0))
    -- 1 - (2 - 3)
    -- 1 - (-1)
    -- 1 + 1
    -- 2
    (2) foldl - комбиниране/акумулиране, извършено чрез групиране отляво
    -- ((0 - 1) - 2) - 3
    -- -1 - 2 - 3 = -6
    (3) foldr1 - комбиниране/акумулиране, извършено чрез групиране отдясно без акумулатор
    foldr1 (-) [1, 2, 3]
    -- 1 - (2 - 3)
    -- 1 - (-1)
    -- 1 + 1
    -- 2
    (4) foldl1 - комбиниране/акумулиране, извършено чрез групиране отляво без акумулатор
    foldl1 (-) [1, 2, 3]
    -- (1 - 2) - 3
    -- -4

8. Оператор - Операторите в Haskell са инфиксни функции, т.е. такива
    (двуаргументни) функции, означенията на които се записват между
    аргументите им, а не преди тях.
    -Свойствата на операторите са приоритет и асоциативност
        *Приоритет - свойство на операторите, което определя
        реда на изпълнение на поредица от различни оператори. Например в аритметиката операциите (операторите)
        умножение и деление имат по-висок приоритет от събирането и изваждането.
        *Асоциативност - свойство на операторите, което определя реда на изпълнение на поредица от еднакви оператори.
        Например в аритметиката операциите (операторите) събиране и умножение са асоциативни, т.е. редът на изпълнение на
        поредица от събирания и умножения е без значение.
        (&&&) :: Int -> Int -> Int
        x &&& y
        | x > y = y
        | otherwise = x

9. Образец - езикова конструкция, с помощта на която се
    описва в обобщен вид отделен възможен случай за даден аргумент
    •Литерал като например 24, ‘f’ или True, даден аргумент се
    съпоставя успешно с такъв образец, ако е равен на неговата
    стойност;
    • Променлива като например x или longVariableName, образец от
    този вид се съпоставя успешно с аргумент с произволна
    стойност;
    • Специален символ за безусловно съпоставяне (wildcard) ‘_’,
    който е съпоставим с произволен аргумент;
